---
name: Deploy on production server
on:
  push:
    branches: [main]
jobs:
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          pip install flake8
      - name: Run flake8
        run: flake8 .
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          if ! docker compose version; then
            echo "❌ Docker Compose не установлен!" >&2
            exit 1
          fi
      - name: Build Docker images
        run: |
          docker compose build
  deploy:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Полная история для гарантии всех файлов
      - name: Generate .env file
        run: |
          echo "Generating .env from .env.example"
          if [ -f .env.example ]; then
            cp .env.example .env
            sed -i "s|^TOKEN=.*|TOKEN=${{ secrets.BOT_TELEGRAM_TOKEN }}|" .env
            sed -i "s|^OWNER_ID=.*|OWNER_ID=${{ secrets.BOT_OWNER_ID }}|" .env
            echo "✅ .env generated:"
            cat .env
          else
            echo "❌ .env.example not found"
            exit 1
          fi
      - name: Verify project structure
        run: |
          echo "Listing all files in workspace:"
          ls -laR .
          echo "Checking required files:"
          for file in src/requirements.txt src/bot.py src/Dockerfile docker-compose.yml .env.example .env; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done
      - name: Prepare files for transfer
        run: |
          echo "Copying required files to a temporary directory"
          mkdir -p temp_deploy
          cp -r src temp_deploy/
          cp docker-compose.yml temp_deploy/
          cp .env temp_deploy/
          echo "Files in temp_deploy:"
          ls -laR temp_deploy/
      - name: Copy project to remote server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          source: "temp_deploy/*" # Передаем только содержимое temp_deploy
          target: /home/admin/covid-bot
          strip_components: 1 # Убираем вложенность temp_deploy
          rm: false # Не удаляем целевую директорию
          debug: true # Подробные логи
      - name: Deploy on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            echo "Deploying to /home/admin/covid-bot"
            cd /home/admin/covid-bot || { echo "❌ Directory not found"; exit 1; }
            ls -la  # Проверка содержимого на сервере
            docker compose pull || { echo "❌ Failed to pull images"; exit 1; }
            docker compose up -d --build || { echo "❌ Failed to start services"; exit 1; }
            docker compose ps
